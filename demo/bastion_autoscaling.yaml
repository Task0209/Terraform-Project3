AWSTemplateFormatVersion: '2010-09-09'
Description: Creates a four-subnet VPC (2 public w/ 2 NAT gateway and 2 private) with a Linux
  bastion instances in the public subnets (c) 2017 Air11 Technology LLC -- licensed
  under the Apache OpenSource 2.0 license, https://opensource.org/licenses/Apache-2.0
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: VPC configuration parameters
      Parameters:
      - VPCCIDR
      - PublicSubnet1CIDR
      - PublicSubnet2CIDR
      - PrivateSubnet1CIDR
      - PrivateSubnet2CIDR
      - SSHLocation
      - KeyPairName
    ParameterLabels:
      VPCCIDR:
        default: Enter CIDR of new VPC
      PublicSubnet1CIDR:
        default: Enter CIDR of the public subnet1
      PrivateSubnet1CIDR:
        default: Enter CIDR of the private subnet1
      PublicSubnet2CIDR:
        default: Enter CIDR of the public subnet2
      PrivateSubnet2CIDR:
        default: Enter CIDR of the private subnet2
      SSHLocation:
        default: Subnet allowed to ssh on TCP to public subnets
      KeyPairName:
        default: Key pair for bastion host

Parameters:
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.10.0.0/16
    Description: CIDR block for entire VPC.
    Type: String
  PublicSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.10.10.0/24
    Description: CIDR block for the public subnet1
    Type: String
  PublicSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.10.20.0/24
    Description: CIDR block for the public subnet2
    Type: String
  PrivateSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.10.30.0/24
    Description: CIDR block for the private subnet1
    Type: String
  PrivateSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.10.40.0/24
    Description: CIDR block for the private subnet2
    Type: String
  SSHLocation:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/0-28
    Default: 0.0.0.0/0
    Description: Network allowed to ssh to instances in public subnet.
    Type: String
  KeyPairName:
    Description: Keypair for Linux bastion host
    Type: AWS::EC2::KeyPair::KeyName
    Default: your-keypair-name-here

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !Ref 'VPCCIDR'
      Tags:
      - Key: Name
        Value: !Sub 'VPC ${VPCCIDR}'
      - Key: CloudFormationStack
        Value: !Ref 'AWS::StackId'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: IGW
      - Key: CloudFormationStack
        Value: !Ref 'AWS::StackId'
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PublicSubnet1CIDR'
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: yes
      Tags:
      - Key: Name
        Value: !Sub 'Public1 ${PublicSubnet1CIDR}'
      - Key: CloudFormationStack
        Value: !Ref 'AWS::StackId'
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PublicSubnet2CIDR'
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: yes
      Tags:
      - Key: Name
        Value: !Sub 'Public2 ${PublicSubnet2CIDR}'
      - Key: CloudFormationStack
        Value: !Ref 'AWS::StackId'
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PrivateSubnet1CIDR'
      AvailabilityZone: us-east-1c
      MapPublicIpOnLaunch: yes
      Tags:
      - Key: Name
        Value: !Sub 'Private1 ${PrivateSubnet1CIDR}'
      - Key: CloudFormationStack
        Value: !Ref 'AWS::StackId'
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PrivateSubnet2CIDR'
      AvailabilityZone: us-east-1d
      MapPublicIpOnLaunch: yes
      Tags:
      - Key: Name
        Value: !Sub 'Private2 ${PrivateSubnet2CIDR}'
      - Key: CloudFormationStack
        Value: !Ref 'AWS::StackId'
  
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  EIP1:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
  EIP2:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
  NAT1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'EIP1.AllocationId'
      SubnetId: !Ref 'PublicSubnet1'
  NAT2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'EIP2.AllocationId'
      SubnetId: !Ref 'PublicSubnet2'
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT1
  PrivateRouteTable1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT2
  PrivateRouteTable2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref 'PublicSubnetRouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'InternetGateway'
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet1'
      RouteTableId: !Ref 'PublicSubnetRouteTable'
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet2'
      RouteTableId: !Ref 'PublicSubnetRouteTable'
  PublicInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPC'
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref 'SSHLocation'
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0


  PrivateSubnetInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPC'
      GroupDescription: Enable all TCP ports from instances in this VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '1'
        ToPort: '65535'
        CidrIp: !Ref 'VPCCIDR'


# Attach Existing IAM role for System Manager
  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ !Ref Ec2InstanceRole ]
  Ec2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        # ********** This is really the only adjustment we need to make to enable use of SSM Session Manager
        #            All the AWS::CloudFormation::Init and cloud init script work is setting up cloudwatch logs
        #            to give visibility to the SSM Agent actions.
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ec2.amazonaws.com ]
            Action:
              - sts:AssumeRole
      Path: /

#Create an Auto Scaling Group
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref BastionLaunchConfig
      MaxSize: '3'
      MinSize: '2'
      DesiredCapacity: '2'
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
  
  BastionLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      LaunchConfigurationName: BastionHostTemplate
      AssociatePublicIpAddress: true
      ImageId: ami-053b0d53c279acc90
      InstanceType: t3.micro
      IamInstanceProfile: !Ref Ec2InstanceProfile
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref PublicInstanceSG
        

Outputs:
  VPCId:
    Description: VPCId of the newly created VPC
    Value: !Ref 'VPC'
  NatGateway1:
    Description: NAT gateway instance
    Value: !Ref 'NAT1'
  NatGateway2:
    Description: NAT gateway instance
    Value: !Ref 'NAT2'
  EIPAddress1:
    Description: EIP allocated to NAT gateway
    Value: !Ref 'EIP1'
  EIPAddress2:
    Description: EIP allocated to NAT gateway
    Value: !Ref 'EIP2'
  PublicSubnet1:
    Description: SubnetId of the public subnet
    Value: !Ref 'PublicSubnet1'
  PublicSubnet2:
    Description: SubnetId of the public subnet
    Value: !Ref 'PublicSubnet2'
